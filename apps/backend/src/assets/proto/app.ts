// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.1
// source: app.proto

/* eslint-disable */
import * as _m0 from 'protobufjs/minimal';

export const protobufPackage = 'app';

export interface Request {
  message: string;
}

export interface Response {
  reply: string;
}

export interface Result {
  eventName: string;
  valid: boolean;
  count: number;
}

export interface ResultList {
  results: Result[];
}

function createBaseRequest(): Request {
  return { message: '' };
}

export const Request = {
  encode(
    message: Request,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.message !== '') {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.message = object.message ?? '';
    return message;
  },
};

function createBaseResponse(): Response {
  return { reply: '' };
}

export const Response = {
  encode(
    message: Response,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.reply !== '') {
      writer.uint32(10).string(message.reply);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reply = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      reply: isSet(object.reply) ? globalThis.String(object.reply) : '',
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.reply !== '') {
      obj.reply = message.reply;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.reply = object.reply ?? '';
    return message;
  },
};

function createBaseResult(): Result {
  return { eventName: '', valid: false, count: 0 };
}

export const Result = {
  encode(
    message: Result,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.eventName !== '') {
      writer.uint32(10).string(message.eventName);
    }
    if (message.valid !== false) {
      writer.uint32(16).bool(message.valid);
    }
    if (message.count !== 0) {
      writer.uint32(24).int32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Result {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.valid = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.count = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Result {
    return {
      eventName: isSet(object.eventName)
        ? globalThis.String(object.eventName)
        : '',
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: Result): unknown {
    const obj: any = {};
    if (message.eventName !== '') {
      obj.eventName = message.eventName;
    }
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Result>, I>>(base?: I): Result {
    return Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Result>, I>>(object: I): Result {
    const message = createBaseResult();
    message.eventName = object.eventName ?? '';
    message.valid = object.valid ?? false;
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseResultList(): ResultList {
  return { results: [] };
}

export const ResultList = {
  encode(
    message: ResultList,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.results) {
      Result.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResultList {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResultList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(Result.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResultList {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => Result.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResultList): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => Result.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResultList>, I>>(base?: I): ResultList {
    return ResultList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResultList>, I>>(
    object: I
  ): ResultList {
    const message = createBaseResultList();
    message.results = object.results?.map((e) => Result.fromPartial(e)) || [];
    return message;
  },
};

export interface AppService {
  GetResponse(request: Request): Promise<Response>;
  GetResult(request: Request): Promise<ResultList>;
}

export const AppServiceServiceName = 'app.AppService';
export class AppServiceClientImpl implements AppService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AppServiceServiceName;
    this.rpc = rpc;
    this.GetResponse = this.GetResponse.bind(this);
    this.GetResult = this.GetResult.bind(this);
  }
  GetResponse(request: Request): Promise<Response> {
    const data = Request.encode(request).finish();
    const promise = this.rpc.request(this.service, 'GetResponse', data);
    return promise.then((data) => Response.decode(_m0.Reader.create(data)));
  }

  GetResult(request: Request): Promise<ResultList> {
    const data = Request.encode(request).finish();
    const promise = this.rpc.request(this.service, 'GetResult', data);
    return promise.then((data) => ResultList.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
